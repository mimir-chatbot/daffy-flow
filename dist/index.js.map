{"version":3,"file":"index.js","names":["nodes: Node[]","edges: Edge[]","daffyNodes: DaffyNode[]","daffyEdges: DaffyEdge[]","tools: Record<string, DaffyTool>","toolNode: DaffyToolNode"],"sources":["../src/constants.ts","../src/fromDaffyDuck.ts","../src/toDaffyDuck.ts"],"sourcesContent":["export const DAFFY_TO_FLOW_NODES = {\n  StartNode: 'start',\n  EndNode: 'end',\n  AgentNode: 'agent',\n  RagNode: 'rag',\n  ToolNode: 'tool',\n  PostgresIntrospectionNode: 'postgres_introspection',\n  MSSQLIntrospectionNode: 'mssql_introspection',\n} as const\n\nexport const FLOW_TO_DAFFY_NODES = {\n  start: 'StartNode',\n  end: 'EndNode',\n  agent: 'AgentNode',\n  rag: 'RagNode',\n  tool: 'ToolNode',\n  postgres_introspection: 'PostgresIntrospectionNode',\n  mssql_introspection: 'MSSQLIntrospectionNode',\n} as const\n\nexport const FLOW_TO_DAFFY_TOOLS = {\n  mcp: 'MCPTool',\n  excel: 'ExcelGeneratorTool',\n  postgres: 'PostgressTool',\n} as const\n\nexport const DAFFY_TO_FLOW_TOOLS = {\n  MCPTool: 'mcp',\n  ExcelGeneratorTool: 'excel',\n  PostgressTool: 'postgres',\n} as const\n\nexport type FlowNodeType = keyof typeof FLOW_TO_DAFFY_NODES\n\nexport type FlowToolType = keyof typeof FLOW_TO_DAFFY_TOOLS\n\nexport type DaffyNodeType = keyof typeof DAFFY_TO_FLOW_NODES\n\nexport type DaffyToolType = keyof typeof DAFFY_TO_FLOW_TOOLS\n","import type { Edge, Node } from '@vue-flow/core'\nimport type { DaffyGraph } from './models/graph'\nimport { DAFFY_TO_FLOW_NODES, DAFFY_TO_FLOW_TOOLS } from './constants'\n\nexport function fromDaffyDuck(graph: DaffyGraph): { nodes: Node[], edges: Edge[] } {\n  const nodes: Node[] = [\n    { id: 'START', type: DAFFY_TO_FLOW_NODES.StartNode, position: { x: -500, y: 0 } },\n    { id: 'END', type: DAFFY_TO_FLOW_NODES.EndNode, position: { x: 500, y: 0 } },\n  ]\n  const edges: Edge[] = []\n\n  for (const daffyNode of graph.nodes.filter(n => n.node !== 'ToolNode')) {\n    nodes.push({\n      id: daffyNode.id,\n      type: DAFFY_TO_FLOW_NODES[daffyNode.node],\n      position: daffyNode.position,\n      data: {\n        config: daffyNode.settings,\n        ...('parallel_tool_calling' in daffyNode ? { parallel_tool_calling: daffyNode.parallel_tool_calling } : {}),\n      },\n    })\n  }\n\n  graph.nodes.filter(n => n.node === 'AgentNode').forEach((node) => {\n    node.tools.forEach((tool, index) => {\n      const toolType = DAFFY_TO_FLOW_TOOLS[tool.name]\n      nodes.push({\n        id: `tool_node_${toolType}_${index}`,\n        type: DAFFY_TO_FLOW_NODES.ToolNode,\n        position: { x: 0, y: 0 },\n        data: {\n          value: toolType,\n          config: tool.settings,\n        },\n      })\n    })\n    edges.push(...node.tools.map((tool, index) => {\n      const toolType = DAFFY_TO_FLOW_TOOLS[tool.name]\n      return {\n        id: `end_tool_node_${toolType}_${index}`,\n        source: node.id,\n        target: `tool_node_${toolType}_${index}`,\n        sourceHandle: 'tools',\n      } satisfies Edge\n    }))\n  })\n\n  edges.push(...graph.edges.filter(e => !e.id?.startsWith('tool_node')).map((e, index) => ({\n    id: e.id || `${e.source}_${e.target}_${index}`,\n    source: e.source,\n    target: e.target || '',\n    sourceHandle: e.source_handle,\n    targetHandle: e.target_handle,\n  } satisfies Edge)))\n\n  return {\n    nodes,\n    edges,\n  }\n}\n","import type { Edge, Node } from '@vue-flow/core'\nimport type { DaffyEdge, DaffyGraph, DaffyNode, DaffyTool, DaffyToolNode } from './models/graph'\nimport { DAFFY_TO_FLOW_NODES, FLOW_TO_DAFFY_NODES, FLOW_TO_DAFFY_TOOLS } from './constants'\n\nfunction findToolTarget(source: string, edges: Edge[]): [index?: number, source?: string] {\n  for (const [index, edge] of edges.entries()) {\n    if (source === edge.source)\n      return [index, edge.target]\n  }\n  return []\n}\n\nexport function toDaffyDuck(nodes: Node[], edges: Edge[]): DaffyGraph {\n  const daffyNodes: DaffyNode[] = []\n  const daffyEdges: DaffyEdge[] = []\n  const tools: Record<string, DaffyTool> = {}\n\n  for (const node of nodes) {\n    if (node.type === DAFFY_TO_FLOW_NODES.StartNode || node.type === DAFFY_TO_FLOW_NODES.EndNode) continue\n\n    if (node.type === DAFFY_TO_FLOW_NODES.ToolNode) {\n      const [index, targetTool] = findToolTarget(node.id, edges)\n      const toolType = node.data.value as string\n      if (!targetTool || !index || !(toolType in FLOW_TO_DAFFY_TOOLS)) continue\n\n      const daffyToolName = FLOW_TO_DAFFY_TOOLS[toolType as keyof typeof FLOW_TO_DAFFY_TOOLS]\n\n      tools[targetTool] = {\n        name: daffyToolName,\n        settings: node.data.config,\n      }\n\n      edges.splice(index, 1)\n    }\n\n    if (node.type === DAFFY_TO_FLOW_NODES.AgentNode) {\n      daffyNodes.push({\n        id: node.id,\n        node: FLOW_TO_DAFFY_NODES.agent,\n        settings: node.data.config,\n        position: node.position,\n        parallel_tool_calling: node.data.parallel_tool_calling ?? true,\n        tools: [],\n      })\n    }\n\n    if (node.type === DAFFY_TO_FLOW_NODES.RagNode) {\n      daffyNodes.push({\n        id: node.id,\n        node: FLOW_TO_DAFFY_NODES.rag,\n        settings: node.data.config,\n        position: node.position,\n      })\n    }\n  }\n\n  daffyEdges.push(...edges.map(e => ({\n    id: e.id,\n    source: e.source,\n    target: e.target,\n    source_handle: e.sourceHandle || undefined,\n    target_handle: e.targetHandle || undefined,\n  } satisfies DaffyEdge)))\n\n  if (Object.keys(tools).length > 0) {\n    const toolNode: DaffyToolNode = {\n      id: 'tool_node',\n      node: FLOW_TO_DAFFY_NODES.tool,\n      parallel_tool_calling: true,\n      position: {\n        x: 0,\n        y: 0,\n      },\n      settings: {},\n      tools: [],\n    }\n\n    for (const target in tools) {\n      toolNode.tools.push(tools[target])\n      for (const node of daffyNodes) {\n        if (node.id === target && node.node === FLOW_TO_DAFFY_NODES.agent) {\n          node.tools.push(tools[target])\n          break\n        }\n      }\n\n      daffyNodes.push(toolNode)\n      daffyEdges.push({\n        id: `${toolNode.id}_${target}`,\n        source: target,\n        condition: {\n          tool_node: 'tools_condition',\n        },\n      }, {\n        id: `end_${toolNode.id}`,\n        source: 'tool_node',\n        target,\n      })\n    }\n  }\n\n  return {\n    nodes: daffyNodes,\n    edges: daffyEdges,\n  }\n}\n"],"mappings":"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"}